package presentacion;

import entidad.ExpedientePadecimientosFamiliares;
import java.awt.Dialog;
import java.util.ArrayList;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import negocio.NegocioExpedientePadecimientosFamiliares;
import negocio.NegocioExpedienteMedico;
import negocio.NegocioPadecimiento;

/**
 * Fornulario de actualizaci칩n de los antecedentes familiares de un paciente
 * @author QUINCHO
 */

public class ContenedorAntecedentesFamiliares extends javax.swing.JPanel 
{
    DefaultTableModel modeloPadecimientosFamiliares;
    ArrayList<String> idsDePadecimientosEliminar = new ArrayList<>();
    ArrayList<String> nombreDePadecimientosAgregar = new ArrayList<>();
    String idExpedienteMedico;
    Dialog parent;   // dialog para hacer la ventana modal
    
    
    public ContenedorAntecedentesFamiliares(String idPaciente, Dialog parent) 
    {
        initComponents();
        String idExpediente = obtenerIdExpediente(idPaciente);
        this.idExpedienteMedico = idExpediente;
        inicializarTabla(idExpediente);
        this.parent = parent;
        inhabilitarComponentes();
        
    }// fin del constructor de ContenedorAntecedentesFamiliares

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlPadecimientos = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblPadecimientosFamiliares = new javax.swing.JTable();
        btnAgregarPadecimiento = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        btnIngresarPadecimientoFam = new javax.swing.JButton();
        txtPadecimientoFamiliar = new javax.swing.JTextField();
        txtParentesco = new javax.swing.JTextField();
        txtDescripcion = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();

        pnlPadecimientos.setBorder(javax.swing.BorderFactory.createTitledBorder("Padecimientos"));

        tblPadecimientosFamiliares.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Padecimiento", "Parentesco", "Descripci칩n"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tblPadecimientosFamiliares);

        btnAgregarPadecimiento.setText("Agregar");
        btnAgregarPadecimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarPadecimientoActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jLabel14.setText("Padecimiento");

        jLabel24.setText("Parentesco");

        jLabel23.setText("Descripci칩n");

        btnIngresarPadecimientoFam.setText("A침adir");
        btnIngresarPadecimientoFam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarPadecimientoFamActionPerformed(evt);
            }
        });

        txtPadecimientoFamiliar.setEditable(false);

        javax.swing.GroupLayout pnlPadecimientosLayout = new javax.swing.GroupLayout(pnlPadecimientos);
        pnlPadecimientos.setLayout(pnlPadecimientosLayout);
        pnlPadecimientosLayout.setHorizontalGroup(
            pnlPadecimientosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPadecimientosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPadecimientosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addGroup(pnlPadecimientosLayout.createSequentialGroup()
                        .addGroup(pnlPadecimientosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPadecimientosLayout.createSequentialGroup()
                                .addComponent(btnAgregarPadecimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlPadecimientosLayout.createSequentialGroup()
                                .addGroup(pnlPadecimientosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel23)
                                    .addComponent(jLabel24))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlPadecimientosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtParentesco, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlPadecimientosLayout.createSequentialGroup()
                                        .addComponent(btnIngresarPadecimientoFam, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtPadecimientoFamiliar, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 453, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlPadecimientosLayout.setVerticalGroup(
            pnlPadecimientosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPadecimientosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlPadecimientosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarPadecimiento)
                    .addComponent(btnEliminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(pnlPadecimientosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIngresarPadecimientoFam)
                    .addComponent(txtPadecimientoFamiliar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addGroup(pnlPadecimientosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtParentesco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addGap(18, 18, 18)
                .addGroup(pnlPadecimientosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addGap(32, 32, 32))
        );

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlPadecimientos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlPadecimientos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar)
                    .addComponent(btnGuardar))
                .addGap(50, 50, 50))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarPadecimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarPadecimientoActionPerformed
        // TODO add your handling code here:
        NegocioPadecimiento objNegocioPad = new NegocioPadecimiento();
        String fila [] = new String [3];
        int idPadecimiento;   // variable donde se guardara el id del padecimiento recien agregado,
                              // retornado por el metodo obtenerId
        
        if (txtPadecimientoFamiliar.getText().equals(""))
            JOptionPane.showMessageDialog(null, "Debe ingresar un padecimiento para agregar", 
                    "Error", JOptionPane.ERROR_MESSAGE);
        
        else
        {
            fila[0] = txtPadecimientoFamiliar.getText();
            fila[1] = txtParentesco.getText();
            fila[2] = txtDescripcion.getText();
        
            modeloPadecimientosFamiliares.addRow(fila);
            nombreDePadecimientosAgregar.add(fila[0]);  // se agrega a la lista
        
            limpiarCampos();   // se limpian los campos de texto
        }// fin del else
    }//GEN-LAST:event_btnAgregarPadecimientoActionPerformed

    private void btnIngresarPadecimientoFamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarPadecimientoFamActionPerformed
        // TODO add your handling code here:
        CatalogoPadecimientos padecimientos = new CatalogoPadecimientos(parent, true);
        padecimientos.setVisible(true);
        
        txtPadecimientoFamiliar.setText(padecimientos.arreglo[0]);
    }//GEN-LAST:event_btnIngresarPadecimientoFamActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        
        if ( (idsDePadecimientosEliminar.isEmpty()) && (nombreDePadecimientosAgregar.isEmpty()) )
        {            
            int confirmacion = JOptionPane.showConfirmDialog(null, "No se realizaron cambios, "
                    + "desea permanecer en esta pantalla?");
        
            if (confirmacion == JOptionPane.NO_OPTION)
                parent.dispose();
        }// fin del if
        
        else
        {
            if ( ! nombreDePadecimientosAgregar.isEmpty() )
                ingresarPadecimientosFamiliares();
            
            if ( ! idsDePadecimientosEliminar.isEmpty() )
                eliminarPadecimientosFamiliares();
            
            JOptionPane.showMessageDialog(null, 
                    "Los cambios en antecedentes familiares se han guardado con 칠xito", 
                    "Informaci칩n", JOptionPane.INFORMATION_MESSAGE);
        }// fin del else                              
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
        habilitarComponentes();        
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = tblPadecimientosFamiliares.getSelectedRow();
        
        if (filaSeleccionada == -1)
            JOptionPane.showMessageDialog(null, "Debe seleccionar un padecimiento para eliminar", 
                    "Error", JOptionPane.ERROR_MESSAGE);
        
        else
        {
            int confirmacion = JOptionPane.showConfirmDialog(null, 
                    "Est치 seguro de eliminar el padecimiento");
            
            if (confirmacion == JOptionPane.YES_OPTION)
            {  // Realizar pruebas si la columna de id esta nula no lo incluya en el arreglo
                
                try 
                {
                    idsDePadecimientosEliminar.add(
                            tblPadecimientosFamiliares.getValueAt(filaSeleccionada, 3).toString());
                
                    modeloPadecimientosFamiliares.removeRow(filaSeleccionada);
                }// fin del try
                catch (NullPointerException npe)
                {
                    System.out.println(nombreDePadecimientosAgregar.size());
                    nombreDePadecimientosAgregar.remove(
                            tblPadecimientosFamiliares.getValueAt(filaSeleccionada, 0).toString());
                    
                    modeloPadecimientosFamiliares.removeRow(filaSeleccionada);
                    System.out.println(nombreDePadecimientosAgregar.size());
                }// fin del catch
                
            }// fin del if
        }// fin del else
    }//GEN-LAST:event_btnEliminarActionPerformed

    // Este m칠todo cargar치 la tabla con los padecimientos de antecedentes familiares de cada paciente
    private void inicializarTabla(String idExpedienteMedico)
    {
        modeloPadecimientosFamiliares = new DefaultTableModel()   //  modelo instanciado
                {
                    @Override // ihabilitamos la tabla para no permitir la edicion de sus columnas
                    public boolean isCellEditable(int rowIndex, int columnIndex)
                    {
                        return false;
                    }// fin del metodo isCellEditable
                };   // modelo de la tabla de padecimientos
        
        modeloPadecimientosFamiliares.addColumn("Padecimiento");  // agregamos las cabeceras de columnas
        modeloPadecimientosFamiliares.addColumn("Parentesco");    // al modelo
        modeloPadecimientosFamiliares.addColumn("Descripci칩n");
        modeloPadecimientosFamiliares.addColumn("Id");
        
        NegocioExpedientePadecimientosFamiliares objNegocioExpPadFam = 
                new NegocioExpedientePadecimientosFamiliares();
        String fila [] = new String [4];
        ResultSet rs;
        
        try
        {
            rs = objNegocioExpPadFam.listarPadecimientosFamiliares(idExpedienteMedico);
            
            while (rs.next())
            {
                fila[0] = rs.getString(1);
                fila[1] = rs.getString(2);
                fila[2] = rs.getString(3);
                fila[3] = rs.getString(4);
                
                modeloPadecimientosFamiliares.addRow(fila);  // agregamos una fila al modelo por el arreglo
            }// fin del while
            
            tblPadecimientosFamiliares.setModel(modeloPadecimientosFamiliares);
            
            // Escondemos la columna de Id
            tblPadecimientosFamiliares.getColumnModel().getColumn(3).setMaxWidth(0);
            tblPadecimientosFamiliares.getColumnModel().getColumn(3).setMinWidth(0);
            tblPadecimientosFamiliares.getColumnModel().getColumn(3).setPreferredWidth(0);
        }// fin del try
        catch (SQLException sqle)
        {
            System.out.println(sqle.getErrorCode() + sqle.getMessage());
        }// fin del catch
    }// fin del metodo inicializarTabla
    
    // El siguiente metodo obtiene el id del expediente medico a partir de id del paciente
    private String obtenerIdExpediente(String idPaciente)
    {
        NegocioExpedienteMedico objNegocioExpMed = new NegocioExpedienteMedico();        
        return objNegocioExpMed.obtenerIdExpedienteMedico(idPaciente);
    }// fin del metodo obtenerIdExpediente
    
    // El siguiente metodo elimina los antecedentes seleccionados de la BD
    private void eliminarPadecimientosFamiliares()
    {
        NegocioExpedientePadecimientosFamiliares objNegocioExpPadFam = 
                new NegocioExpedientePadecimientosFamiliares();
        
        for (int i = 0; i < idsDePadecimientosEliminar.size(); i++)
        {
            objNegocioExpPadFam.eliminarPadecimientoFamiliar(
                    idsDePadecimientosEliminar.get(i), idExpedienteMedico);
        }// fin del for
        
    }// fin del metodo eliminarPadecimientosFamiliares
    
    // El siguiente metodo ingresa los antecedentes seleccionado de la BD
    private void ingresarPadecimientosFamiliares()
    {
        NegocioExpedientePadecimientosFamiliares objNegocioExpPadFam = 
                new NegocioExpedientePadecimientosFamiliares();
        NegocioPadecimiento objNegocioPad = new NegocioPadecimiento();
        int idsPadecimientos [] = new int [nombreDePadecimientosAgregar.size()];
        ExpedientePadecimientosFamiliares objExpPadFam [] 
                = new ExpedientePadecimientosFamiliares [idsPadecimientos.length];
        
        for (int i = 0; i < idsPadecimientos.length; i++)  // obtemos los ids de los padecimientos enlistados
            idsPadecimientos[i] = objNegocioPad.obtenerId(nombreDePadecimientosAgregar.get(i));
        
        // Extraemos el indice de la tabla desde donde se agregaron nuevos padecimientos
        int indice = tblPadecimientosFamiliares.getRowCount() - nombreDePadecimientosAgregar.size();
        
        for (int i = 0; i < objExpPadFam.length; i++)
        {
            objExpPadFam[i] = new ExpedientePadecimientosFamiliares();
            
            // se ingresa el padecimiento seleccionado del catalogo de padecimientos (CatalogoPadecimientos.java)
            objExpPadFam[i].setIdPadecimiento(idsPadecimientos[i]);
            
            objExpPadFam[i].setIdExpediente(Integer.parseInt(idExpedienteMedico));   // se ingresan los    
            objExpPadFam[i].setParentesco(tblPadecimientosFamiliares.getValueAt(indice, 1).toString());  // restantes
            objExpPadFam[i].setDescripcion(tblPadecimientosFamiliares.
                    getValueAt(indice, 2).toString()); // atributos
            
            // insertamos en la base de datos
            objNegocioExpPadFam.insertarExpedientePadecimientosFamiliares(objExpPadFam[i]);
            
            indice++;
        } // fin del for
    }// fin del metodo ingresarPadecimientosFamiliares
    
    // El siguiente metodo limpia los campos de texto
    private void limpiarCampos()
    {
        txtPadecimientoFamiliar.setText("");
        txtParentesco.setText("");
        txtDescripcion.setText("");
    }// fin del metodo limpiarCampos
    
    // El siguiente metodo inhabilita componentes de este formulario
    private void inhabilitarComponentes()
    {
        btnAgregarPadecimiento.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnIngresarPadecimientoFam.setEnabled(false);
        txtPadecimientoFamiliar.setEnabled(false);
        txtParentesco.setEnabled(false);
        txtDescripcion.setEnabled(false);
    }// fin del metodo inhabilitarComponentes
    
    private void habilitarComponentes()
    {
        btnAgregarPadecimiento.setEnabled(true);
        btnEliminar.setEnabled(true);
        btnIngresarPadecimientoFam.setEnabled(true);
        txtPadecimientoFamiliar.setEnabled(true);
        txtParentesco.setEnabled(true);
        txtDescripcion.setEnabled(true);
    }// fin del metodo habilitarComponentes
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarPadecimiento;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnIngresarPadecimientoFam;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPanel pnlPadecimientos;
    private javax.swing.JTable tblPadecimientosFamiliares;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtPadecimientoFamiliar;
    private javax.swing.JTextField txtParentesco;
    // End of variables declaration//GEN-END:variables
}
